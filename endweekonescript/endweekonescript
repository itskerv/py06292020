#!/usr/bin/python3

# -------------------------------------------------------------------------------
# Program name     : endweekonescript.py
# Student Name     : Kervin Rodriguez
# Course           : Python Course
# Instructor       : Zach Feezer
# Date             : March 17, 2020
# -------------------------------------------------------------------------------

# Replace RPG starter project with this code when new instructions are live

import requests

def main():
    # prompt for initials
    player = input("Type in your initials: ")
    rounds = input("How many rounds would you like to play? ")
    playerscore = 0 # a counter for the player's score

    # make a request to http://jservice.io/api/random
    zresp = requests.get(f"http://jservice.io/api/random?count={rounds}")

    # strip off JSON from the 200 response
    listofquestions = zresp.json()

    # run the game by looping over the results
    for jquestion in listofquestions:
        # print(jquestion, end="\n\n")  # this would print out every dictionary
        # each time through the loop pose the question to the player
        print(f"Alex Says: {jquestion['question']}")
        playeranswer = input(f"\tType your Answer --> ({jquestion['answer']}") # capture the user's input

        # user can response by typing input be sure to normalize to lowercase
        if playeranswer.lower() == jquestion['answer'].lower():
            print(f"Alex Says: Thats right, you add {jquestion['value']} to your score")
            # alter playerscore counter, increase by the question's point value
            playerscore = playerscore + jquestion.get('value', 1000)
        else:
            print(f"Alex Says: Oh, not quite right! The answer we were looking for was {jquestion['answer']}")


    # after 10 rounds, show the player's score
    print(f"Alex Says: Okay! Let's see how you did.\nLooks like your score is {playerscore}")

    # if their score is higher than any of those in highscore.txt, ask for and then write out the player's INITIALS, and their score, to highscore.txt. Be sure to only track the top 10 most high scores!
    with open("jeopardyhighscores.txt") as jhs:
        highscorelist = jhs.readlines()
    
    # sort the data taken from the file
    highscorelist.sort()

    for score in highscorelist:
        if playerscore > int(score.rstrip("\n")):
            print("looks like a high score!")
            highscorelist.remove(score)
            highscorelist.append(str(playerscore))
            break

    with open("jeopardyhighscores.txt", "w") as jhs:
        for score in highscorelist:
            jhs.write(score.rstrip("\n")+"\n")

if __name__ == "__main__":
    main()





def showInstructions():
  #print a main menu and the commands
    print('''
	RPG Game
	========
	Commands:
  	go [direction]
  	get [item]
	''')
    print     		

def showStatus():
  #print the player's current status
  print('---------------------------')
  print('You are in the ' + currentRoom)
  #print the current inventory
  print('Inventory : ' + str(inventory))
  #print an item if there is one
  if "item" in rooms[currentRoom]:
    print('You see a ' + rooms[currentRoom]['item'])
  print("---------------------------")

#an inventory, which is initially empty
inventory = []

#a dictionary linking a room to other rooms
rooms = {
            'Closet' : {
                'south' : 'Hall',
                'item' : 'flash light',
                },
            'Hall' : { 
                  'south' : 'Kitchen',
                  'north' : 'Closet',
                  'east'  : 'Dining Room',
                  'item'  : 'key',
                },

            'Kitchen' : {
                  'north' : 'Hall',
                  'item' : 'monster',
                },
            'Dining Room' : {
                'west' : 'Hall',
                'south': 'Garden',
                'item' : 'potion',
                },
            'Garden' : {
                'north' : 'Dining Room',
                'south' : 'Shed',
                },
         }

#start the player in the Hall
currentRoom = 'Hall'

showInstructions()

#loop forever
while True:

  showStatus()

  #get the player's next 'move'
  #.split() breaks it up into an list array
  #eg typing 'go east' would give the list:
  #['go','east']
  move = ''
  while move == '':  
    move = input('>')
  
  # split allows an items to have a space on them
  # get golden key is returned ["get", "golden key"]          
  move = move.lower().split(" ", 1)

  #if they type 'go' first
  if move[0] == 'go':
    #check that they are allowed wherever they want to go
    if move[1] in rooms[currentRoom]:
      #set the current room to the new room
      currentRoom = rooms[currentRoom][move[1]]
    #there is no door (link) to the new room
    else:
        print('You can\'t go that way!')

  #if they type 'get' first
  if move[0] == 'get' :
    #if the room contains an item, and the item is the one they want to get
    if "item" in rooms[currentRoom] and move[1] in rooms[currentRoom]['item']:
      #add the item to their inventory
      inventory += [move[1]]
      #display a helpful message
      print(move[1] + ' got!')
      #delete the item from the room
      del rooms[currentRoom]['item']
    #otherwise, if the item isn't there to get
    else:
      #tell them they can't get it
      print('Can\'t get ' + move[1] + '!')

## If a player enters a room with a monster
  if 'item' in rooms[currentRoom] and 'monster' in rooms[currentRoom]['item']:
    print('A monster has got you... GAME OVER!')
    break

## Define how a player can win
  if currentRoom == 'Garden' and 'key' in inventory and 'potion' and 'flash light' in inventory:
    print('You escaped the house with the ultra rare key and magic potion... YOU WIN!')
    break
